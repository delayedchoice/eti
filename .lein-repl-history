exit
(run-proxy "/api" 3100 "http://localhost/whaterver")
(run-proxy "/api" 3100 "http://localhost/whaterver" {})
exit
(run-proxy "/api" 3100 "http://localhost/whaterver" {})
exit
(run-proxy "/api" 3100 "http://localhost/whaterver" {})
exit
(run-proxy "/api" 3100 "http://localhost/whaterver" {})
exit
(run-proxy "/api" 3100 "http://localhost/whaterver" {})
(onelog.core/set-warn!)
(onelog.core/set-debug!)
exit
   (use 'figwheel-sidecar.repl-api)
 28    (start-figwheel!)
exit
   (use 'figwheel-sidecar.repl-api)
(start-figwheel!)
exit
   (use 'figwheel-sidecar.repl-api)
(start-figwheel!)
exit
(start-figwheel!)
   (use 'figwheel-sidecar.repl-api)
(start-figwheel!)
exit
   (use 'figwheel-sidecar.repl-api)
(start-figwheel!)
kjjk
(onelog.core/set-debug!)
kykkkj
exit
   (use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(onelog.core/set-debug!)
exit
(onelog.core/set-debug!)
   (use 'figwheel-sidecar.repl-api)
(start-figwheel!)
exit
   (use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(onelog.core/set-debug!)
exit
   (use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(onelog.core/set-debug!)
exit
   (use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(onelog.core/set-debug!)
exit
(start-figwheel!)
   (use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(onelog.core/set-debug!)
   (use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(onelog.core/set-debug!)
yyj
(ns test-db
    (:require [konserve.filestore :refer [new-fs-store]]
              [konserve.core :as k]
              [clojure.core.async :as async :refer [<!!]]))
(def store (<!! (new-fs-store "resouces/store")))
(def store (<!! (new-fs-store "resources/store")))
(<!! (k/assoc-in store [:bar] 42))
(<!! (k/update-in store [:bar] inc))
(<!! (k/get-in store [:bar]))
exit
(def store (<!! (new-fs-store "resources/store")))
(ns test-db
    (:require [konserve.filestore :refer [new-fs-store]]
              [konserve.core :as k]
              [clojure.core.async :as async :refer [<!!]]))
(def store (<!! (new-fs-store "resources/store")))
(<!! (k/get-in store [:bar]))
   (use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(onelog.core/set-debug!)
kk
(ns test-db (:require [konserve.filestore :refer [new-fs-store]] [konserve.core :as k] [clojure.core.async :as async :refer [<!!]]))
(def store (<!! (fs/new-fs-store "resources/store")))
(ns test-db (:require [konserve.filestore :as fs] [konserve.core :as k] [clojure.core.async :as async :refer [<!!]]))
(def store (<!! (fs/new-fs-store "resources/store")))
(<!! (fs/list-keys store))
(<!! (k/get-in store ["/foo?test"]))
(<!! (fs/list-keys store))
exit
   (use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(onelog.core/set-debug!)
exit
   (use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(onelog.core/set-debug!)
(ns test-db (:require [konserve.filestore :as fs] [konserve.core :as k] [clojure.core.async :as async :refer [<!!]]))
(<!! (fs/list-keys store))
(def store (<!! (fs/new-fs-store "resources/store")))
(<!! (fs/list-keys store))
(<!! (k/get-in store ["/foo?test"))
(<!! (k/get-in store ["/foo?test"]))
(<!! (fs/list-keys store))
exit
   (use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(onelog.core/set-debug!)
(ns test-db (:require [konserve.filestore :as fs] [konserve.core :as k] [clojure.core.async :as async :refer [<!!]]))
(def store (<!! (fs/new-fs-store "resources/store")))
(<!! (fs/list-keys store))
(<!! (k/get-in store ["/foo?test"]))
jkkkj
(<!! (k/get-in store ["/foo?test"]))
(<!! (fs/list-keys store))
exit
   (use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(onelog.core/set-debug!)
kjjjj
(ns test-db (:require [konserve.filestore :as fs] [konserve.core :as k] [clojure.core.async :as async :refer [<!!]]))
(def store (<!! (fs/new-fs-store "resources/store")))
(<!! (fs/list-keys store))
exit
   (use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(onelog.core/set-debug!)
(ns test-db (:require [konserve.filestore :as fs] [konserve.core :as k] [clojure.core.async :as async :refer [<!!]]))
(def store (<!! (fs/new-fs-store "resources/store")))
(<!! (fs/list-keys store))
exit
   (use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(onelog.core/set-debug!)
exit
   (use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(onelog.core/set-debug!)
(ns test-db (:require [konserve.filestore :as fs] [konserve.core :as k] [clojure.core.async :as async :refer [<!!]]))
(def store (<!! (fs/new-fs-store "resources/store")))
(<!! (fs/list-keys store))
kk
1
(<!! (fs/list-keys store))
(<!! (k/get-in store ["/foo?test"]))
exit
   (use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(onelog.core/set-debug!)
(ns test-db (:require [konserve.filestore :as fs] [konserve.core :as k] [clojure.core.async :as async :refer [<!!]]))
(def store (<!! (fs/new-fs-store "resources/store")))
(<!! (fs/list-keys store))
(<!! (k/get-in store ["/foo?test"]))
(<!! (fs/list-keys store))
(<!! (k/get-in store ["/foo?test"]))
(type (<!! (k/get-in store ["/foo?test"])))
(<!! (k/get-in store ["/foo?test"]))
(type (<!! (k/get-in store ["/foo?test"])))
:w
exit
   (use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(onelog.core/set-debug!)
(ns test-db (:require [konserve.filestore :as fs] [konserve.core :as k] [clojure.core.async :as async :refer [<!!]]))
(def store (<!! (fs/new-fs-store "resources/store")))
(<!! (fs/list-keys store))
exi
exit
   (use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(onelog.core/set-debug!)
exit
   (use 'figwheel-sidecar.repl-api)
(start-figwheel!)
jj 
w
:W
(onelog.core/set-debug!)
